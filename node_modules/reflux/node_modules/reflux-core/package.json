{
  "name": "reflux-core",
  "version": "0.2.1",
  "description": "A simple library for uni-directional dataflow application architecture inspired by ReactJS Flux",
  "main": "lib/index.js",
  "scripts": {
    "clean": "rimraf ./lib",
    "test:mocha": "mocha",
    "test:karma": "karma start test/config/karma.conf.js",
    "test:travis": "karma start test/config/karma-travis.conf.js",
    "test": "npm run test:mocha && npm run test:karma",
    "lint:test": "jshint test/",
    "lint:src": "eslint src/",
    "lint": "npm run lint:test && npm run lint:src",
    "compile": "npm run clean && babel src --out-dir lib && ./scripts/version",
    "build": "npm run lint && npm run compile && npm run test",
    "benchmark": "node test/benchmarks",
    "watch:test": "watch 'npm run lint:test && npm run test' test/",
    "watch:src": "watch 'npm run build' src/",
    "watch": "parallelshell 'npm run watch:src' 'npm run watch:test'",
    "prepublish": "npm run lint && npm run compile && npm run test:mocha",
    "precommit": "npm run prepublish",
    "prepush": "npm run prepublish"
  },
  "author": {
    "name": "Mikael Brassman"
  },
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "https://github.com/reflux/reflux-core.git"
  },
  "bugs": {
    "url": "http://github.com/reflux/reflux-core/issues"
  },
  "keywords": [
    "reflux",
    "flux",
    "architecture",
    "dataflow",
    "action",
    "events",
    "data"
  ],
  "dependencies": {
    "eventemitter3": "^1.1.1"
  },
  "devDependencies": {
    "babel": "^5.8.19",
    "babel-eslint": "^4.0.5",
    "benchmark": "^1.0.0",
    "browserify": "~10.2.3",
    "chai": "latest",
    "chai-as-promised": "latest",
    "es6-promise": "^2.3.0",
    "eslint": "^0.24.1",
    "husky": "^0.9.2",
    "jshint": "latest",
    "karma": "latest",
    "karma-browserify": "latest",
    "karma-commonjs": "latest",
    "karma-mocha": "latest",
    "karma-phantomjs-launcher": "latest",
    "karma-sauce-launcher": "latest",
    "karma-spec-reporter": "latest",
    "mocha": "latest",
    "parallelshell": "latest",
    "q": "^1.0.1",
    "replace": "^0.3.0",
    "rimraf": "^2.4.2",
    "sinon": "^1.10.3",
    "watch": "latest"
  },
  "readme": "# reflux-core\n\nA simple core library for unidirectional dataflow architecture inspired by [Flux](http://facebook.github.io/react/blog/2014/05/06/flux.html). This module does not depend on React and may be used together with other view engine libraries.\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][npm-url]\n[![Dependencies][dependencies-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/reflux-core.svg)](https://saucelabs.com/u/reflux-core)\n\nFor an overview of reflux with react extensions, look at the [refluxjs repository][refluxjs-url].\n\n## Installation\n\nYou can currently install the package as an npm package.\n\n### NPM\n\nThe following command installs `reflux-core` as an npm package:\n\n    npm install reflux-core\n\n### ES5\n\nReflux depends on ES5 features. For older browsers that are missing them you will need a shim such as `core-js/es5` from [core-js](https://github.com/zloirock/core-js#ecmascript-5) or `es5-shim.js` from [kriskowal's es5-shim](https://github.com/kriskowal/es5-shim).\n\n## Development\n\nYou need to have NodeJS installed.\n\n1. Clone this repository\n\n2. Run `npm install`\n\nYou can run the following npm scripts, for more check the project's `package.json` file.\n\n* `npm compile` Use babel to transpile the ES6 code to ES5, output is `/lib`.\n\n* `npm test` To run the jshint and tests\n\n* `npm run watch` To run the watch task. It will lint, compile and test the code whenever a file is saved.\n\n* `npm run benchmark` To run the benchmark test\n\n[Husky git hooks](https://github.com/typicode/husky) will prevent bad commits or bad pushes for you by linting and testing the code.\n\n## Extending `reflux-core`\n\n### As an add-on\n\nTo create an add-on for Reflux, you may do that by creating a callback that `Reflux#use` can handle.\n\n```javascript\n// addon.js\n\n// The callback recieves an instance of Reflux library that is being used.\nexport default function(Reflux) {\n\n    // add a simple function to Reflux\n    Reflux.createState = function() {\n        return {};\n    };\n\n}\n```\n\nThe user will have to do the following to use the add-on:\n\n```javascript\nimport Reflux from \"reflux-core\";\n    // or \"reflux\" or any other reflux with extensions\n\nimport createStateAddon from \"./addon.js\";\n\nReflux.use(createStateAddon);\n\nconsole.log(Reflux.createState());\n// outputs {}\n```\n\n* When publishing the plugin to npm, you don't need to have `reflux-core` or `reflux` as a dependency among `dependencies` in `package.json` as the user provides the version they use through the `Reflux#use` method.\n\n* If you're writing tests, you may want to use `reflux-core` and put it in `devDependencies` instead.\n\n* You may name your library `reflux-addon-{name}`.\n\n* Please do provide `reflux-addon` among `keywords` in `package.json` so that users can easily search for your addon in the npm registry.\n\n### As extensions for a view library\n\nInstall reflux-core as a dependency and publish it as a library to npm. Here is an example entry point:\n\n```javascript\n// index.js\nimport Reflux from \"reflux-core\";\nimport frameworkExtras from \"./framework-extras\";\n\nReflux.use(frameworkExtras); // like an add-on\n\nexport default Reflux; // export the amended Reflux lib\n```\n\n* You may name your library `reflux-{view library}`. E.g. if you're doing mixins for angular then it may be named `reflux-angular`.\n\n* Please do provide `reflux` among `keywords` in `package.json` so that users can easily search for your extensions in the npm registry.\n\n## Colophon\n\n[List of contributors](https://github.com/reflux/reflux-core/graphs/contributors) is available on Github.\n\nThis project is licensed under [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause). Copyright (c) 2014, Mikael Brassman.\n\nFor more information about the license for this particular project [read the LICENSE.md file](LICENSE.md).\n\nThis project uses [eventemitter3](https://github.com/3rd-Eden/EventEmitter3), is currently MIT licensed and [has it's license information here](https://github.com/3rd-Eden/EventEmitter3/blob/master/LICENSE).\n\n[npm-image]: http://img.shields.io/npm/v/reflux-core.svg\n[downloads-image]: http://img.shields.io/npm/dm/reflux-core.svg\n[dependencies-image]: http://img.shields.io/david/reflux/reflux-core.svg\n[npm-url]: https://www.npmjs.org/package/reflux-core\n[travis-image]: http://img.shields.io/travis/reflux/reflux-core/master.svg\n[travis-url]: https://travis-ci.org/reflux/reflux-core\n[gratipay-image]: http://img.shields.io/gratipay/spoike.svg\n[gratipay-url]: https://gratipay.com/spoike/\n[refluxjs-url]: https://github.com/reflux/refluxjs#refluxjs\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/reflux/reflux-core",
  "_id": "reflux-core@0.2.1",
  "dist": {
    "shasum": "34b54106ae5c5ca8a94426f34318a65b8f54260f"
  },
  "_from": "reflux-core@^0.2.1",
  "_resolved": "https://registry.npmjs.org/reflux-core/-/reflux-core-0.2.1.tgz"
}
