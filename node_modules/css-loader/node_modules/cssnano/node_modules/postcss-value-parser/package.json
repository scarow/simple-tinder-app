{
  "name": "postcss-value-parser",
  "version": "2.0.5",
  "description": "Transforms css values and at-rule params into the tree",
  "main": "lib/index.js",
  "files": [
    "lib"
  ],
  "devDependencies": {
    "eslint": "^1.1.0",
    "tap-spec": "^4.1.0",
    "tape": "^4.2.0"
  },
  "scripts": {
    "test": "eslint lib test && tape test/*.js | tap-spec"
  },
  "author": {
    "name": "Bogdan Chadkin",
    "email": "trysound@yandex.ru"
  },
  "license": "MIT",
  "homepage": "https://github.com/TrySound/postcss-value-parser",
  "repository": {
    "type": "git",
    "url": "https://github.com/TrySound/postcss-value-parser.git"
  },
  "keywords": [
    "postcss",
    "value",
    "parser"
  ],
  "bugs": {
    "url": "https://github.com/TrySound/postcss-value-parser/issues"
  },
  "readme": "[![Travis CI](https://travis-ci.org/TrySound/postcss-value-parser.svg)](https://travis-ci.org/TrySound/postcss-value-parser)\r\n\r\n# postcss-value-parser\r\n\r\nTransforms css values and at-rule params into the tree\r\n\r\n## Usage\r\n\r\n```js\r\nvar parser = require('postcss-value-parser');\r\n\r\n/*{\r\n    nodes: [\r\n      type: 'function',\r\n      value: 'rgba',\r\n      nodes: [\r\n        { type: 'word', value: '233' },\r\n        { type: 'div', value: ',', before: '', after: ' ' },\r\n        { type: 'word', value: '45' },\r\n        { type: 'div', value: ',', before: '', after: ' ' },\r\n        { type: 'word', value: '66' },\r\n        { type: 'div', value: ',', before: ' ', after: '' },\r\n        { type: 'word', value: '.5' }\r\n      ]\r\n    ]\r\n  }*/\r\nparser('rgba(233, 45, 66 ,.5)')\r\n  .walk('rgba', function (fn) {\r\n    var color = fn.filter(function (node) {\r\n      return node.type === 'word';\r\n    }); // [233, 45, 66, .5]\r\n    fn.type = 'word';\r\n    fn.value = convertToHex(color);\r\n  })\r\n  .toString();\r\n  // #E92D42\r\n```\r\n\r\n### Prevent walking into function\r\n\r\n```js\r\nparser('url(some url) 50% 50%')\r\n  .walk(function (node) {\r\n    // Your code\r\n\r\n    if (node.type === 'function' && node.value === 'url') {\r\n      return false;\r\n    }\r\n  })\r\n  .toString();\r\n```\r\n\r\n## Node types\r\n\r\n- `{ type: 'word', value: 'any' }`\r\n- `{ type: 'string', value: 'string', quote: '\"' || '\\'' }`\r\n- `{ type: 'div', value: '/' || ',' || ':', before: ' ', after: ' ' }`\r\n- `{ type: 'space', value: ' ' }` space as a separator\r\n- `{ type: 'function', value: 'name', nodes: [] }`\r\n\r\n## API\r\n\r\n```\r\nvar parser = require('postcss-value-parser');\r\n```\r\n\r\n### parser.unit(value)\r\n\r\nReturns parsed value\r\n\r\n```js\r\n// .2rem\r\n{\r\n  number: '.2',\r\n  unit: 'rem'\r\n}\r\n```\r\n\r\n### parser.trim(nodes)\r\n\r\nTrims space nodes (modifies original array and returns reference on it)\r\n\r\n### parser.stringify(nodes)\r\n\r\nStringifies node and array of nodes\r\n\r\n### var p = parser(value)\r\n\r\nReturns parsed tree\r\n\r\n### p.nodes\r\n\r\nRoot nodes list\r\n\r\n### p.toString()\r\n\r\nStringify tree to the value\r\n\r\n### p.walk([name, ]cb[, reverse])\r\n\r\n- `name` value filter\r\n- `cb(node, index, nodes)`\r\n- `reverse` walk to the deepest functions firstly\r\n\r\n# License\r\n\r\nMIT Â© [Bogdan Chadkin](mailto:trysound@yandex.ru)\r\n",
  "readmeFilename": "README.md",
  "_id": "postcss-value-parser@2.0.5",
  "dist": {
    "shasum": "cb78dff96c1dc43aaa40716f0018e1bdf02fd1d4"
  },
  "_from": "postcss-value-parser@^2.0.5",
  "_resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-2.0.5.tgz"
}
